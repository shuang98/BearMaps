import com.sun.tools.doclets.formats.html.SourceToHTMLConverter;

import java.util.LinkedList;
import java.util.List;
import java.util.ArrayList;

/**
 * This class provides a main method for experimenting with GraphDB construction.
 * You could also use MapServer, but this class lets you play around with
 * GraphDB in isolation from all the rest of the parts of this assignment.
 */
public class GraphDBLauncher {
    private static final String OSM_DB_PATH = "berkeley.osm";

    public static void main(String[] args) {
        GraphDB g = new GraphDB(OSM_DB_PATH);

        Iterable<Long> verticesIterable = g.vertices();

        /* Convert iterable to a list. */
        List<Long> vertices = new ArrayList<Long>();
        for (long v : verticesIterable) {
            vertices.add(v);
        }

        System.out.println("There are " + vertices.size() + " vertices in the graph.");
        System.out.println("The first 10 vertices are:");
        for (int i = 0; i < 10; i += 1) {
            if (i < vertices.size()) {
                System.out.println(vertices.get(i));
            }
        }
        double end_lat=37.83796678748061, start_lon=-122.26143030962002, start_lat=37.831051606162895, end_lon=-122.2650498760774;

        long v = g.closest(start_lon, start_lat);
        System.out.print("The vertex number closest to -122.258207, 37.875352 is " + v + ", which");
        System.out.println(" has longitude, latitude of: " + g.lon(v) + ", " + g.lat(v));
        System.out.print("The vertex number closest to -122.258207, 37.875352 is " + v + ", which");
        System.out.println(" has longitude, latitude of: " + g.lon(v) + ", " + g.lat(v));
        System.out.println("To get started, uncomment print statements in GraphBuildingHandler.");
        System.out.println("adjecentNodes of " + v +  ":");
        for (long n : g.adjacent(v)) {
            System.out.println(n);
        }
        long start = 266433383;
        long end = 3257627657l;
        LinkedList<Long> path = Router.shortestPath(g, start_lon, start_lat, end_lon, end_lat);
        //LinkedList<Long> f = Router.shortestPath(g, g.lon(start), g.lat(start), g.lon(275782472l), g.lat(275782472l));
        System.out.println("Path");
        for (long d : path) {
            System.out.print(d +  ", ");
        }
        System.out.println();
        System.out.println(path.size());
        //[266433383, 53122181, 53099306, 53099304, 312431308, 312431297, 312431298, 1237053599, 53121454, 1237053615, 1237053647, 651063703, 1237053624, 53107946, 53085960, 1237053585, 1237053720, 53085999, 53088345, 1237053584, 53088338, 53106473, 1237053711, 53106431, 53121461, 53121462, 53096046, 53043874, 53096049, 53096051, 2820169740, 2820169756, 2820169751, 2820169731, 2820169753, 53082577, 623807841, 53064680, 3701955052, 2086760873, 53037909, 2086760870, 2086696624, 53037907, 275782472, 370473556, 2086667342]
        // 266433383, 53122181, 53099306, 53099304, 312431308, 312431297, 312431298, 1237053599, 53121454, 1237053615, 1237053647, 651063703, 1237053624, 53107946, 53085960, 1237053585, 1237053720, 53085999, 53088345, 1237053584, 53088338, 53106473, 1237053711, 53106431, 53121461, 53121462, 53096046, 53043874, 53096049, 53096051, 2820169740, 2820169756, 2820169751, 2820169731, 2820169753, 53082577, 623807841, 53064680, 3701955052, 2086760873, 53037909, 2086760870, 2086696624, 53037907, 275782472, 370473556, 2086667342,
        //53055671, 53055669, 206093746, 206093737, 311881838, 311881839, 53113941, 687156445, 206093720, 687156444, 687156443, 206140573, 687156442, 686812170, 53144625, 687156441, 686812168, 247703639, 247703638, 53149956, 247703637, 53111730, 686812166, 2664661348, 697180293, 53085385, 2664661346, 2664661347, 53142555, 2664661345, 53100813, 206140572, 957600579, 957600576, 305541372, 957600568, 206140571, 2664661349, 957600561, 53078473, 957600555, 206140570, 206140569, 956500324, 206140568, 956500319, 53140454, 53149961, 683050103, 2664625370, 683050102, 53149962, 683050101, 683050100, 956500323, 53119040, 956500322, 256542899, 53149965, 256543149, 256543153, 956500321, 256543152, 956500320, 256543151, 256543150, 53119042, 256543310, 266636093, 256543311, 266636094, 256543313, 53065783, 256543314, 256543315, 256543317, 256543318, 256543319, 256543320, 256543321, 53099375, 956500325, 245068539, 245068908, 245068540, 53119037, 245068542, 245068543, 245068544, 245068545, 245068546, 245068547, 53119038, 266635755, 245067850, 266635756, 245067851, 245067852, 256543047, 53066396, 683050096, 53119046, 245067853, 245067854]>
        //53055671, 53055669, 206093746, 206093737, 311881838, 311881839, 53113941, 687156445, 206093720, 687156444, 687156443, 206140573, 687156442, 686812170, 53144625, 687156441, 686812168, 247703639, 247703638, 53149956, 247703637, 53111730, 686812166, 2664661348, 697180293, 53085385, 2664661346, 2664661347, 53142555, 2664661345, 53100813, 206140572, 957600579, 957600576, 305541372, 957600568, 206140571, 2664661349, 957600561, 53078473, 957600555, 206140570, 206140569, 956500324, 206140568, 956500319, 53140454, 53149961, 683050103, 2664625370, 683050102, 53149962, 683050101, 683050100, 956500323, 53119040, 956500322, 256542899, 53149965, 256543149, 256543153, 956500321, 256543152, 956500320, 256543151, 256543150, 53119042, 256543310, 266636093, 256543311, 266636094, 256543313, 53065783, 256543314, 256543315, 256543317, 256543318, 256543319, 256543320, 256543321, 53099375, 956500325, 245068539, 245068908, 245068540, 53119037, 245068542, 245068543, 245068544, 245068545, 245068546, 245068547, 53119038, 266635755, 245067850, 266635756, 245067851, 245067852, 256543047, 53066396, 683050096, 53119046, 245067853, 245067854,

    }

}
